#version 460
#extension GL_NV_ray_tracing : require


struct HitInfo
{
    bool Missed;
    vec3 Point;
    vec3 Normal;
    vec2 UV;
    vec4 Color;
    float Reflectivity;
};

layout(set = 0, binding = 0) uniform accelerationStructureNV topLevelAS;
layout(set = 0, binding = 1, rgba8) uniform image2D image;

layout(location = 0) rayPayloadNV HitInfo hitValue;
layout(location = 3) rayPayloadNV HitInfo reflectionHit;

#define MAX_LIGHTS 10

struct DirectionalLight
{
	vec4 Color;
	vec4 Direction;
};

struct PointLight
{
    vec4 Color;
    vec4 PositionRadius;
};

layout(set = 0, binding = 2) uniform GlobalUniformData
{
    float FieldOfView;
    float NearPlane;
    float FarPlane;
    vec4 Position;
	mat4 ViewMatrix;
	mat4 ProjectionMatrix;
    vec4 ClearColor;
    vec4 LightCounts;
    PointLight PointLights[MAX_LIGHTS];
    DirectionalLight DirectionalLights[MAX_LIGHTS];
} GlobalUniform;


void FireRay(vec3 origin, vec3 direction, float tmin, float tmax)
{
    uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin, tmin, direction, tmax, 0);
}

#define MAX_RECURSION 2

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);

    vec2 d = inUV * 2.0 - 1.0;
    float aspectRatio = float(gl_LaunchSizeNV.x) / float(gl_LaunchSizeNV.y);
    float fov = GlobalUniform.FieldOfView;
    vec3 direction = normalize(vec3(d.x * aspectRatio*fov, d.y*fov, -1));
    direction = vec3(vec4(direction,0.0f) * (GlobalUniform.ViewMatrix));

    vec3 origin = vec3(GlobalUniform.Position);

/*
    HitInfo infos[MAX_RECURSION];
    int reflectionCount = 0;
    float tmin = GlobalUniform.NearPlane; //First ray fired by the camera has the near plane distance applied on it
    for(uint rayIndex = 0; rayIndex < MAX_RECURSION; rayIndex++)
    {
        FireRay(origin, direction, tmin, GlobalUniform.FarPlane);
        infos[rayIndex] = hitValue;
        reflectionCount++;
        if(hitValue.Missed || hitValue.Reflectivity <= 0.0f) break;
        origin = hitValue.Point + hitValue.Normal*0.01f;
        direction = normalize(reflect(direction, hitValue.Normal));
        tmin = 0.0f; //the reflections can have a minimum t = 0
    }
*/

    float tmin = GlobalUniform.NearPlane;
    vec4 color;
    FireRay(origin, direction, tmin, GlobalUniform.FarPlane);
    color = hitValue.Color;
    float oldRefl = hitValue.Reflectivity;
    if(!hitValue.Missed && hitValue.Reflectivity >= 0.0f)
    {
        origin = hitValue.Point + hitValue.Normal*0.01f;
        direction = normalize(reflect(direction, hitValue.Normal));
        tmin = 0.0f; //the reflections can have a minimum t = 0
        FireRay(origin, direction, tmin, GlobalUniform.FarPlane);
        color = color * (1.0f - oldRefl) + hitValue.Color * oldRefl;
    }

    /*
    vec4 color = infos[reflectionCount].Color * infos[reflectionCount].Reflectivity;

    for(int hitIndex = reflectionCount-1; hitIndex >= 0; hitIndex--)
    {
        vec4 hitColor = infos[hitIndex].Color;
        float hitReflectivity = infos[hitIndex].Reflectivity;
        color = hitColor*(1.0f-hitReflectivity) + color*hitReflectivity;
    }
*/
    imageStore(image, ivec2(gl_LaunchIDNV.xy), color);

    
}
